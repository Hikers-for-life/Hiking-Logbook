import { useState, useEffect, useRef, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Button } from "./ui/button";
import { Badge } from "./ui/badge";
import { Input } from "./ui/input";
import { Textarea } from "./ui/textarea";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "./ui/dialog";
import { 
  Play, 
  Pause, 
  Square, 
  MapPin, 
  Clock, 
  Mountain, 
  Navigation,
  Save,
  Plus
} from "lucide-react";

const ActiveHike = ({ hikeId, onComplete, onSave, initialData }) => {
  // Hike state
  const [isActive, setIsActive] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [startTime, setStartTime] = useState(null);
  const [elapsedTime, setElapsedTime] = useState(0);
  const [currentDistance, setCurrentDistance] = useState(0);
  const [currentElevation, setCurrentElevation] = useState(0);
  
  // Real-time editable data
  const [hikeData, setHikeData] = useState({
    title: initialData?.title || "",
    location: initialData?.location || "",
    weather: initialData?.weather || "",
    difficulty: initialData?.difficulty || "Easy",
    notes: initialData?.notes || "",
    waypoints: [],
    accomplishments: [],
    gpsTrack: []
  });

  // GPS and location state
  const [currentLocation, setCurrentLocation] = useState(null);
  const [watchId, setWatchId] = useState(null);
  const intervalRef = useRef(null);
  const [previousLocation, setPreviousLocation] = useState(null);
  const lastWaypointTime = useRef(null);

  // Accomplishment dialog state
  const [isAccomplishmentDialogOpen, setIsAccomplishmentDialogOpen] = useState(false);
  const [accomplishmentText, setAccomplishmentText] = useState("");

  // Calculate distance between two GPS points (Haversine formula)
  const calculateDistance = (lat1, lon1, lat2, lon2) => {
    const R = 6371; // Earth's radius in km
    const dLat = (lat2 - lat1) * (Math.PI / 180);
    const dLon = (lon2 - lon1) * (Math.PI / 180);
    const a = 
      Math.sin(dLat/2) * Math.sin(dLat/2) +
      Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) * 
      Math.sin(dLon/2) * Math.sin(dLon/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c; // Distance in km
  };

  // Auto-save timer
  const autoSaveRef = useRef(null);
  const hikeDataRef = useRef(hikeData);

  // Start tracking GPS location
  useEffect(() => {
    if (isActive && !isPaused) {
      if (navigator.geolocation) {
        const id = navigator.geolocation.watchPosition(
          (position) => {
            const { latitude, longitude, altitude, accuracy } = position.coords;
            const newLocation = { latitude, longitude, altitude, accuracy, timestamp: new Date() };
            
            console.log('GPS Update:', { latitude, longitude, altitude, accuracy });
            
            // Calculate distance from previous location
            if (previousLocation && isActive) {
              const distanceKm = calculateDistance(
                previousLocation.latitude, 
                previousLocation.longitude, 
                latitude, 
                longitude
              );
              
              console.log('Distance calculated:', distanceKm, 'km');
              
              // Only add distance if it's significant (avoid GPS noise) and accuracy is good
              if (distanceKm > 0.02 && accuracy < 30) { // 20 meters threshold, 30m accuracy
                setCurrentDistance(prev => {
                  const newDistance = prev + distanceKm;
                  console.log('Total distance updated:', newDistance, 'km');
                  return newDistance;
                });
                
                // Auto-save waypoint every significant movement, but limit frequency
                const now = Date.now();
                const timeSinceLastWaypoint = lastWaypointTime.current ? now - lastWaypointTime.current : Infinity;
                
                if (timeSinceLastWaypoint > 10000) { // Only create waypoint every 10 seconds minimum
                  lastWaypointTime.current = now;
                  
                  setHikeData(prev => {
                    const newWaypoint = {
                      id: now,
                      ...newLocation,
                      distance: currentDistance + distanceKm,
                      autoGenerated: true
                    };
                    
                    return {
                      ...prev,
                      waypoints: [...prev.waypoints, newWaypoint],
                      gpsTrack: [...prev.gpsTrack, {
                        latitude: newLocation.latitude,
                        longitude: newLocation.longitude,
                        altitude: newLocation.altitude,
                        timestamp: newLocation.timestamp,
                        distance: currentDistance + distanceKm
                      }]
                    };
                  });
                } else {
                  // Still update GPS track for route visualization, just don't create waypoints
                  setHikeData(prev => ({
                    ...prev,
                    gpsTrack: [...prev.gpsTrack, {
                      latitude: newLocation.latitude,
                      longitude: newLocation.longitude,
                      altitude: newLocation.altitude,
                      timestamp: newLocation.timestamp,
                      distance: currentDistance + distanceKm
                    }]
                  }));
                }
              }
            }
            
            setCurrentLocation(newLocation);
            setPreviousLocation(newLocation);
            
            // Update elevation if available
            if (altitude && altitude !== null) {
              setCurrentElevation(prev => Math.max(prev, Math.round(altitude * 3.28084))); // Convert to feet
            }
          },
          (error) => {
            console.error("GPS Error:", error.code, error.message);
            // Handle different GPS error types
            switch(error.code) {
              case error.PERMISSION_DENIED:
                console.error("Location access denied by user");
                break;
              case error.POSITION_UNAVAILABLE:
                console.error("Location information unavailable");
                break;
              case error.TIMEOUT:
                console.error("Location request timed out");
                break;
              default:
                console.error("Unknown location error");
                break;
            }
          },
          {
            enableHighAccuracy: true,
            timeout: 10000,
            maximumAge: 1000
          }
        );
        setWatchId(id);
      }
    } else if (watchId) {
      navigator.geolocation.clearWatch(watchId);
      setWatchId(null);
    }

    return () => {
      if (watchId) {
        navigator.geolocation.clearWatch(watchId);
      }
    };
  }, [isActive, isPaused, previousLocation, currentDistance]);

  // Timer for elapsed time
  useEffect(() => {
    if (isActive && !isPaused) {
      intervalRef.current = setInterval(() => {
        setElapsedTime(prev => prev + 1);
      }, 1000);
    } else {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    }

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, [isActive, isPaused]);

  // Update ref when hikeData changes
  useEffect(() => {
    hikeDataRef.current = hikeData;
  }, [hikeData]);

  // Auto-save function wrapped in useCallback
  const handleAutoSave = useCallback(() => {
    const saveData = {
      ...hikeDataRef.current,
      currentDistance,
      currentElevation,
      elapsedTime,
      isActive,
      isPaused,
      lastSaved: new Date()
    };
    
    onSave(saveData);
  }, [currentDistance, currentElevation, elapsedTime, isActive, isPaused, onSave]);

  // Auto-save functionality
  useEffect(() => {
    if (isActive) {
      autoSaveRef.current = setInterval(() => {
        handleAutoSave();
      }, 30000); // Auto-save every 30 seconds
    } else {
      if (autoSaveRef.current) {
        clearInterval(autoSaveRef.current);
      }
    }

    return () => {
      if (autoSaveRef.current) {
        clearInterval(autoSaveRef.current);
      }
    };
  }, [isActive, hikeData, currentDistance, currentElevation, elapsedTime, handleAutoSave]);

  const handleStartHike = () => {
    const actualStartTime = new Date();
    setIsActive(true);
    setIsPaused(false);
    setStartTime(actualStartTime);
    setElapsedTime(0);
    setCurrentDistance(0);
    setCurrentElevation(0);
    lastWaypointTime.current = null; // Reset waypoint timer
    
    console.log('Hike started at:', actualStartTime.toISOString());
    
    // Add initial waypoint when starting
    if (currentLocation) {
      const startWaypoint = {
        id: Date.now(),
        ...currentLocation,
        timestamp: actualStartTime,
        distance: 0,
        notes: "Start Point",
        isStartPoint: true
      };
      setHikeData(prev => ({
        ...prev,
        waypoints: [startWaypoint],
        gpsTrack: [{
          latitude: currentLocation.latitude,
          longitude: currentLocation.longitude,
          altitude: currentLocation.altitude,
          timestamp: actualStartTime,
          distance: 0
        }]
      }));
    }
  };

  const handlePauseResume = () => {
    setIsPaused(!isPaused);
  };

  const handleStopHike = () => {
    setIsActive(false);
    setIsPaused(false);
    
    // Calculate total distance from waypoints if GPS distance failed
    let finalDistance = currentDistance;
    if (finalDistance === 0 && hikeData.waypoints.length > 1) {
      console.log('Calculating distance from waypoints as fallback');
      let totalDistance = 0;
      for (let i = 1; i < hikeData.waypoints.length; i++) {
        const prev = hikeData.waypoints[i - 1];
        const curr = hikeData.waypoints[i];
        totalDistance += calculateDistance(prev.latitude, prev.longitude, curr.latitude, curr.longitude);
      }
      finalDistance = totalDistance;
      console.log('Fallback distance calculation:', finalDistance, 'km');
    }
    
    // Add final waypoint - use current location or last known location
    let finalWaypoints = [...hikeData.waypoints];
    let finalGpsTrack = [...hikeData.gpsTrack];
    
    // Get the location to use for end point
    const endLocation = currentLocation || previousLocation || (finalWaypoints.length > 0 ? finalWaypoints[0] : null);
    
    if (endLocation) {
      const finalWaypoint = {
        id: Date.now(),
        latitude: endLocation.latitude,
        longitude: endLocation.longitude,
        altitude: endLocation.altitude,
        accuracy: endLocation.accuracy,
        timestamp: new Date(),
        distance: finalDistance,
        notes: "End Point",
        isEndPoint: true
      };
      finalWaypoints.push(finalWaypoint);
      
      // Also add to GPS track
      finalGpsTrack.push({
        latitude: endLocation.latitude,
        longitude: endLocation.longitude,
        altitude: endLocation.altitude,
        timestamp: finalWaypoint.timestamp,
        distance: finalDistance
      });
    }
    
    // Save final hike data
    const endTime = new Date();
    const finalHikeData = {
      ...hikeData,
      waypoints: finalWaypoints,
      gpsTrack: finalGpsTrack,
      date: new Date().toISOString(), // Add the date field
      startTime,
      endTime,
      duration: formatTime(elapsedTime),
      distance: `${finalDistance.toFixed(1)} km`,
      elevation: `${currentElevation} ft`,
      status: 'completed',
      actualStartTime: startTime?.toISOString(),
      actualEndTime: endTime.toISOString()
    };
    
    console.log('Final hike data:', finalHikeData);
    onComplete(finalHikeData);
  };

  const handleDataChange = (field, value) => {
    setHikeData(prev => ({
      ...prev,
      [field]: value
    }));
  };



  const addWaypoint = () => {
    if (currentLocation) {
      const waypoint = {
        id: Date.now(),
        ...currentLocation,
        timestamp: new Date(),
        distance: currentDistance,
        notes: ""
      };
      
      setHikeData(prev => ({
        ...prev,
        waypoints: [...prev.waypoints, waypoint],
        gpsTrack: [...prev.gpsTrack, {
          latitude: currentLocation.latitude,
          longitude: currentLocation.longitude,
          altitude: currentLocation.altitude,
          timestamp: waypoint.timestamp,
          distance: currentDistance
        }]
      }));
    }
  };

  const addAccomplishment = (accomplishment) => {
    const newAccomplishment = {
      id: Date.now(),
      text: accomplishment,
      timestamp: new Date(),
      distance: currentDistance,
      location: currentLocation
    };
    
    setHikeData(prev => ({
      ...prev,
      accomplishments: [...prev.accomplishments, newAccomplishment]
    }));
  };

  const handleAddAccomplishment = () => {
    if (accomplishmentText.trim()) {
      addAccomplishment(accomplishmentText.trim());
      setAccomplishmentText("");
      setIsAccomplishmentDialogOpen(false);
    }
  };

  const formatTime = (seconds) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    
    if (hours > 0) {
      return `${hours}h ${minutes}m ${secs}s`;
    } else if (minutes > 0) {
      return `${minutes}m ${secs}s`;
    } else {
      return `${secs}s`;
    }
  };

  const updateDistance = (newDistance) => {
    setCurrentDistance(parseFloat(newDistance) || 0);
  };

  const quickUpdateDistance = (increment) => {
    setCurrentDistance(prev => Math.max(0, prev + increment));
  };

  return (
    <div className="min-h-screen bg-background p-4">
      <div className="max-w-4xl mx-auto space-y-6">
        {/* Header with controls */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle className="text-2xl text-foreground">
                {isActive ? "Hiking in Progress" : "Start Your Hike"}
              </CardTitle>
              <div className="flex gap-2">
                {!isActive && (
                  <Button 
                    onClick={handleStartHike}
                    className="bg-green-600 hover:bg-green-700"
                  >
                    <Play className="h-4 w-4 mr-2" />
                    Start Hike
                  </Button>
                )}
                
                {isActive && (
                  <>
                    <Button 
                      onClick={handlePauseResume}
                      variant="outline"
                    >
                      {isPaused ? <Play className="h-4 w-4 mr-2" /> : <Pause className="h-4 w-4 mr-2" />}
                      {isPaused ? "Resume" : "Pause"}
                    </Button>
                    <Button 
                      onClick={handleStopHike}
                      className="bg-red-600 hover:bg-red-700"
                    >
                      <Square className="h-4 w-4 mr-2" />
                      Finish Hike
                    </Button>
                  </>
                )}
              </div>
            </div>
          </CardHeader>
          
          {isActive && (
            <CardContent>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="text-center">
                  <Clock className="h-6 w-6 mx-auto mb-2 text-blue-600" />
                  <div className="text-2xl font-bold">{formatTime(elapsedTime)}</div>
                  <div className="text-sm text-muted-foreground">Duration</div>
                </div>
                <div className="text-center">
                  <Mountain className="h-6 w-6 mx-auto mb-2 text-green-600" />
                  <div className="text-2xl font-bold">{currentDistance.toFixed(1)}</div>
                  <div className="text-sm text-muted-foreground">km</div>
                </div>
                <div className="text-center">
                  <Navigation className="h-6 w-6 mx-auto mb-2 text-purple-600" />
                  <div className="text-2xl font-bold">{currentElevation}</div>
                  <div className="text-sm text-muted-foreground">Elevation (ft)</div>
                </div>
                <div className="text-center">
                  <MapPin className="h-6 w-6 mx-auto mb-2 text-red-600" />
                  <div className="text-sm font-bold">
                    {currentLocation ? "GPS Active" : "No GPS"}
                  </div>
                  <Badge variant={currentLocation ? "default" : "destructive"}>
                    {currentLocation ? "Tracking" : "No Signal"}
                  </Badge>
                </div>
              </div>
            </CardContent>
          )}
        </Card>

        {/* Hike Details - Always editable */}
        <Card>
          <CardHeader>
            <CardTitle>Hike Details</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-2 block">Hike Title</label>
                <Input
                  value={hikeData.title}
                  onChange={(e) => handleDataChange('title', e.target.value)}
                  placeholder="Name your hike..."
                />
              </div>
              <div>
                <label className="text-sm font-medium mb-2 block">Starting Location</label>
                <Input
                  value={hikeData.location}
                  onChange={(e) => handleDataChange('location', e.target.value)}
                  placeholder="Where are you hiking?"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div>
                <label className="text-sm font-medium mb-2 block">Current Weather</label>
                <Input
                  value={hikeData.weather}
                  onChange={(e) => handleDataChange('weather', e.target.value)}
                                        placeholder="Sunny, 22°C"
                />
              </div>
              <div>
                <label className="text-sm font-medium mb-2 block">
                  Distance Progress 
                  <span className="text-xs text-muted-foreground ml-1">(Auto-tracked)</span>
                </label>
                <div className="flex items-center gap-2">
                  <Button
                    type="button"
                    size="sm"
                    variant="outline"
                    onClick={() => quickUpdateDistance(-0.5)}
                    className="px-2"
                  >
                    -0.5
                  </Button>
                  <Input
                    type="number"
                    step="0.1"
                    value={currentDistance.toFixed(1)}
                    onChange={(e) => updateDistance(e.target.value)}
                    placeholder="0.0"
                    className="text-center"
                  />
                  <Button
                    type="button"
                    size="sm"
                    variant="outline"
                    onClick={() => quickUpdateDistance(0.5)}
                    className="px-2"
                  >
                    +0.5
                  </Button>
                </div>
                <p className="text-xs text-muted-foreground mt-1">km (GPS auto-calculated)</p>
                <div className="flex gap-1 mt-1">
                  <Button
                    type="button"
                    size="sm"
                    variant="ghost"
                    onClick={() => quickUpdateDistance(0.5)}
                    className="text-xs"
                  >
                    +0.5km
                  </Button>
                  <Button
                    type="button"
                    size="sm"
                    variant="ghost"
                    onClick={() => quickUpdateDistance(1.0)}
                    className="text-xs"
                  >
                    +1km
                  </Button>
                </div>
              </div>
            </div>

            {/* Difficulty Level Selector */}
            <div>
              <label className="text-sm font-medium mb-2 block">
                Difficulty Level
                <span className="text-xs text-muted-foreground ml-1">(How challenging is this hike?)</span>
              </label>
              <div className="flex gap-2">
                {['Easy', 'Moderate', 'Hard'].map((difficulty) => (
                  <Button
                    key={difficulty}
                    type="button"
                    variant={hikeData.difficulty === difficulty ? 'default' : 'outline'}
                    onClick={() => handleDataChange('difficulty', difficulty)}
                    className={`flex-1 ${
                      hikeData.difficulty === difficulty
                        ? difficulty === 'Easy'
                          ? 'bg-green-600 hover:bg-green-700 text-white'
                          : difficulty === 'Moderate'
                          ? 'bg-yellow-600 hover:bg-yellow-700 text-white'
                          : 'bg-red-600 hover:bg-red-700 text-white'
                        : 'border-border'
                    }`}
                  >
                    {difficulty}
                  </Button>
                ))}
              </div>
              <p className="text-xs text-muted-foreground mt-1">
                You can update this anytime during or after your hike
              </p>
            </div>
          </CardContent>
        </Card>

        {/* Real-time Notes */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Notes & Thoughts Along the Way</CardTitle>
              <Badge variant="secondary" className="text-xs">
                {isActive ? "Live Editing" : "Ready to Edit"}
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <Textarea
              value={hikeData.notes}
              onChange={(e) => handleDataChange('notes', e.target.value)}
              placeholder="Keep track of your thoughts, observations, and experiences as you hike... What do you see? How do you feel? Any interesting wildlife or landmarks?"
              rows={6}
              className="w-full"
            />
            <div className="flex justify-between items-center mt-2">
              <div className="flex items-center gap-4">
                <span className="text-sm text-muted-foreground">
                  {isActive ? "Auto-saves every 30 seconds" : "Click 'Start Hike' to enable auto-save"}
                </span>
                {hikeData.notes && (
                  <span className="text-xs text-muted-foreground">
                    {hikeData.notes.length} characters
                  </span>
                )}
              </div>
              <Button onClick={handleAutoSave} variant="outline" size="sm">
                <Save className="h-4 w-4 mr-2" />
                Save Now
              </Button>
            </div>
          </CardContent>
        </Card>

        {/* Quick Actions */}
        {isActive && (
          <Card>
            <CardHeader>
              <CardTitle>Quick Actions</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="flex flex-wrap gap-2">
                <Button onClick={addWaypoint} variant="outline">
                  <MapPin className="h-4 w-4 mr-2" />
                  Mark Waypoint
                </Button>
                <Button 
                  onClick={() => setIsAccomplishmentDialogOpen(true)}
                  variant="outline"
                >
                  <Plus className="h-4 w-4 mr-2" />
                  Add Accomplishment
                </Button>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Waypoints List - Only show manually added waypoints (excluding auto-generated but keeping start/end) */}
        {hikeData.waypoints.filter(wp => !wp.autoGenerated || wp.isStartPoint || wp.isEndPoint).length > 0 && (
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>GPS Waypoints Marked</CardTitle>
                <Badge variant="outline" className="text-xs">
                  {hikeData.waypoints.filter(wp => !wp.autoGenerated || wp.isStartPoint || wp.isEndPoint).length} waypoints
                </Badge>
              </div>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {hikeData.waypoints.filter(wp => !wp.autoGenerated || wp.isStartPoint || wp.isEndPoint).map((waypoint, index) => (
                  <div key={waypoint.id} className="flex items-start justify-between p-3 bg-muted rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <Badge variant="secondary" className="text-xs">
                          Waypoint #{index + 1}
                        </Badge>
                        <span className="text-sm text-muted-foreground">
                          {waypoint.timestamp.toLocaleTimeString()}
                        </span>
                      </div>
                      <div className="text-sm text-muted-foreground">
                        GPS: {waypoint.latitude?.toFixed(6)}, {waypoint.longitude?.toFixed(6)}
                        {waypoint.altitude && (
                          <div>Altitude: {Math.round(waypoint.altitude * 3.28084)} ft</div>
                        )}
                      </div>
                    </div>
                    <div className="text-right">
                      <Badge variant="outline">
                        {waypoint.distance.toFixed(1)} km
                      </Badge>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Accomplishments List */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Keep Track of Your Accomplishments Along the Way</CardTitle>
              <Badge variant="outline" className="text-xs">
                {hikeData.accomplishments.length} recorded
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            {hikeData.accomplishments.length === 0 ? (
              <div className="text-center py-8 text-muted-foreground">
                <Mountain className="h-12 w-12 mx-auto mb-4 opacity-50" />
                <p className="text-lg mb-2">No accomplishments recorded yet</p>
                <p className="text-sm">
                  {isActive 
                    ? "Use the 'Add Accomplishment' button above to record milestones as you hike!" 
                    : "Start your hike to begin tracking accomplishments along the way."
                  }
                </p>
              </div>
            ) : (
              <div className="space-y-3">
                {hikeData.accomplishments.map((accomplishment, index) => (
                  <div key={accomplishment.id} className="flex items-start justify-between p-3 bg-muted rounded-lg">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-1">
                        <Badge variant="secondary" className="text-xs">
                          #{index + 1}
                        </Badge>
                        <span className="text-sm text-muted-foreground">
                          {accomplishment.timestamp.toLocaleTimeString()}
                        </span>
                      </div>
                      <p className="font-medium">{accomplishment.text}</p>
                    </div>
                    <div className="text-right">
                      <Badge variant="outline">
                        {accomplishment.distance.toFixed(1)} km
                      </Badge>
                      {accomplishment.location && (
                        <div className="text-xs text-muted-foreground mt-1">
                          GPS: {accomplishment.location.latitude?.toFixed(4)}, {accomplishment.location.longitude?.toFixed(4)}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            )}
          </CardContent>
        </Card>

        {/* Accomplishment Dialog */}
        <Dialog open={isAccomplishmentDialogOpen} onOpenChange={setIsAccomplishmentDialogOpen}>
          <DialogContent className="sm:max-w-[425px]">
            <DialogHeader>
              <DialogTitle>Add Accomplishment</DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  What did you accomplish?
                </label>
                <Input
                  value={accomplishmentText}
                  onChange={(e) => setAccomplishmentText(e.target.value)}
                  placeholder="e.g., Reached the summit, saw a beautiful waterfall..."
                  className="w-full"
                  autoFocus
                />
              </div>
              <div className="flex gap-3 pt-4">
                <Button
                  variant="outline"
                  onClick={() => {
                    setAccomplishmentText("");
                    setIsAccomplishmentDialogOpen(false);
                  }}
                  className="flex-1"
                >
                  Cancel
                </Button>
                <Button
                  onClick={handleAddAccomplishment}
                  className="flex-1 bg-green-600 hover:bg-green-700 text-white"
                  disabled={!accomplishmentText.trim()}
                >
                  Add Accomplishment
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </div>
  );
};

export default ActiveHike;
